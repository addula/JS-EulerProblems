/*
  Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2,  
  the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... 
  By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/
(function() {

    // Brute force approach
    function firstApproach(limit) {
        var f1 = 1, f2 = 1, result = 0, sum = 0;
        while(result < limit) {
            if(result % 2 === 0) {
                sum += result;
            }
            result = f1 + f2;
            f2 = f1;
            f1 = result;
        }
        return sum;
    }

    function nthFibonacciNumber(n) {
        var fiveSqrt = Math.sqrt(5);
        var inverseSqrt5 = 1 / fiveSqrt;
        var phi = (1 + fiveSqrt) / 2;
        return Math.floor(Math.pow(phi, n) * inverseSqrt5 + 0.5);
    }

    // After 2 every 3rd number is even number in fibonacci series.
    function secondApproach(limit) {
        var sum = 0, nth = 3, nthFib = 0; // 2 is 3rd fibonacci number in series.
        while(((nthFib = nthFibonacciNumber(nth)) < limit) && (nth += 3) && (sum += nthFib)){}
        return sum;
    }
    
    // Fn = Fn-1 + Fn-2 = Fn-2 + Fn-3 + Fn-3 +Fn-4 = (since Fn-1 = Fn-2 + Fn-3 and so on) Fn-3 + Fn-4 + Fn-3 +Fn-3 +Fn-4 = 3Fn-3 + 2Fn-4 = 3Fn-3 + Fn-4 + Fn-5 + Fn-6) = 4Fn-3 + Fn-6 (since Fn-4 + Fn-5 = Fn-3) 
    function thirdApproach(limit) {
        var fib = [2,0], i = 0, summed = 0;
        while (fib[i] < limit) {
            summed += fib[i];
            i = (i + 1) % 2;
            fib[i] = 4 * fib[(i + 1) % 2] + fib[i];
        }
        return summed;
    }

    var a;

    a = performance.now();
    console.log(firstApproach(4e6));
    console.log(performance.now() - a);

    a = performance.now();
    console.log(secondApproach(4e6));
    console.log(performance.now() - a);

    a = performance.now();
    console.log(thirdApproach(4e6));
    console.log(performance.now() - a);

})();
